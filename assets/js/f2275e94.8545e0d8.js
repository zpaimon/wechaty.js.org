(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{237:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return p}));var r=a(3),o=a(8),n=(a(0),a(247)),i={title:"Ideas list"},l={unversionedId:"gsoc/ideas",id:"gsoc/ideas",isDocsHomePage:!1,title:"Ideas list",description:"This page aggregates project ideas form Wechaty community.",source:"@site/docs/gsoc/ideas.md",slug:"/gsoc/ideas",permalink:"/docs/gsoc/ideas",editUrl:"https://github.com/wechaty/wechaty.js.org/edit/master/docusaurus/docs/gsoc/ideas.md",version:"current",lastUpdatedBy:"Huan LI (\u674e\u5353\u6853)",lastUpdatedAt:1616933370,formattedLastUpdatedAt:"3/28/2021",sidebar:"docs",previous:{title:"Google Summer of Code",permalink:"/docs/gsoc/"},next:{title:"GSoC 2021",permalink:"/docs/gsoc/2021"}},c=[{value:"Introduction",id:"introduction",children:[{value:"Learn more from community",id:"learn-more-from-community",children:[]}]},{value:"The Ideas",id:"the-ideas",children:[{value:"Project #32: Enhance Whatsapp Puppet",id:"project-32-enhance-whatsapp-puppet",children:[]},{value:'Project #33: Implement "Twitter" Puppet',id:"project-33-implement-twitter-puppet",children:[]},{value:'Project #34: Implement "Twilio" Puppet',id:"project-34-implement-twilio-puppet",children:[]},{value:'Project #35: Implement "Teams" Puppet',id:"project-35-implement-teams-puppet",children:[]},{value:"Project #36: Implement Wechaty Rasa Plugin",id:"project-36-implement-wechaty-rasa-plugin",children:[]},{value:"Project #37: Automatic video production with a news content",id:"project-37-automatic-video-production-with-a-news-content",children:[]},{value:"Project #38: Improve wechaty-puppet-lark",id:"project-38-improve-wechaty-puppet-lark",children:[]},{value:"Project #39: An FAQ for Open source projects",id:"project-39-an-faq-for-open-source-projects",children:[]},{value:"Project #40: Wechaty Rust",id:"project-40-wechaty-rust",children:[]},{value:"Project #41: Automatically label and classify according to the input text or link",id:"project-41-automatically-label-and-classify-according-to-the-input-text-or-link",children:[]},{value:"Project #42: Design a plug-in to provide HTTP API service for go-wechaty",id:"project-42-design-a-plug-in-to-provide-http-api-service-for-go-wechaty",children:[]},{value:"Project #43: Implement a group information collector by java wechaty.",id:"project-43-implement-a-group-information-collector-by-java-wechaty",children:[]},{value:"Project #44: Develop a WeChat chatbot for building simple personal knowledge base",id:"project-44-develop-a-wechat-chatbot-for-building-simple-personal-knowledge-base",children:[]},{value:"Project #45: Wechaty HTTP Callback",id:"project-45-wechaty-http-callback",children:[]},{value:"Project #46: Wechat group-society",id:"project-46-wechat-group-society",children:[]},{value:"Project #47: github webhook transformer/deligator for IM",id:"project-47-github-webhook-transformerdeligator-for-im",children:[]},{value:"Project #48: Wechaty cluster management system",id:"project-48-wechaty-cluster-management-system",children:[]},{value:"Project #49: Implement wechaty-storage",id:"project-49-implement-wechaty-storage",children:[]},{value:"Project #50: path analysis of conversation graphs",id:"project-50-path-analysis-of-conversation-graphs",children:[]},{value:"Project #51: reinforcement learning as a method to design conversations",id:"project-51-reinforcement-learning-as-a-method-to-design-conversations",children:[]},{value:"Project #52: connect chat adventure game engine to Wechaty",id:"project-52-connect-chat-adventure-game-engine-to-wechaty",children:[]},{value:'Project #53: create "mind map" authoring tool for simple wechaty bots',id:"project-53-create-mind-map-authoring-tool-for-simple-wechaty-bots",children:[]},{value:'Project #54: Implement "Slack" Puppet',id:"project-54-implement-slack-puppet",children:[]},{value:"Project #55: Implement CLI control wechaty",id:"project-55-implement-cli-control-wechaty",children:[]},{value:"Project #56: Implement Maodou assistant based on conversational AI",id:"project-56-implement-maodou-assistant-based-on-conversational-ai",children:[]},{value:"Project #58: Implement Wechaty For Mac",id:"project-58-implement-wechaty-for-mac",children:[]},{value:"Project #59: Improve matrix-appservice-wechaty user info",id:"project-59-improve-matrix-appservice-wechaty-user-info",children:[]},{value:"Project #62: Create a Web Component for a Chat UI for Wechaty",id:"project-62-create-a-web-component-for-a-chat-ui-for-wechaty",children:[]},{value:"Project #63: Wechaty Todo List",id:"project-63-wechaty-todo-list",children:[]}]},{value:"Contact us",id:"contact-us",children:[]}],s={toc:c};function p(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(n.b)("wrapper",Object(r.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"This page aggregates project ideas form Wechaty community."),Object(n.b)("h2",{id:"introduction"},"Introduction"),Object(n.b)("p",null,"Below you can find project ideas\nwhich comes from our ",Object(n.b)("a",{parentName:"p",href:"https://wechaty.js.org/contributors/"},"Wechaty contributors"),".\nNew ideas may be proposed by interested developers."),Object(n.b)("p",null,"Project ideas without potential mentors will be considered though applicants may need to work with the community to find mentors."),Object(n.b)("p",null,"To add a new project idea, see: ",Object(n.b)("a",{parentName:"p",href:"https://github.com/wechaty/wishlist/issues"},"proposing project ideas"),"."),Object(n.b)("h3",{id:"learn-more-from-community"},"Learn more from community"),Object(n.b)("p",null,"You can ",Object(n.b)("a",{parentName:"p",href:"https://gitter.im/wechaty/wechaty"},"join our Gitter")," network if you aren\u2019t already a member, ",Object(n.b)("a",{parentName:"p",href:"https://bit.ly/2zpi2XG"},"read our Meeting Notes")," to learn what we discussed in the past, or run ",Object(n.b)("a",{parentName:"p",href:"https://wechaty.js.org/docs/getting-started/"},"getting started with Wechaty")," right now!"),Object(n.b)("h2",{id:"the-ideas"},"The Ideas"),Object(n.b)("p",null,"Below you can see the list of project ideas that fully match the Wechaty' project idea standard. The scope of these ideas is well known and we don't normally expect deep changes. All ideas have quick start guidelines and newbie-frienfly issues referenced. We welcome contributors to join the mentor teams, and we invite developers to submit project proposal applications in relation to these ideas."),Object(n.b)("h3",{id:"project-32-enhance-whatsapp-puppet"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/32"},"Project #32: Enhance Whatsapp Puppet")),Object(n.b)("p",null,"We want Wechaty to be the universal instant messaging SDK on all IM platforms for chatbot makers to build their great conversational user interface, so while these are our ideas of what we think would make good projects for the summer, we're eager to hear your ideas and proposals as well."),Object(n.b)("p",null,"Enhance Whatsapp Puppet ",Object(n.b)("a",{parentName:"p",href:"https://github.com/wechaty/wechaty-puppet-whatsapp"},"https://github.com/wechaty/wechaty-puppet-whatsapp"),". The Puppet abstraction allows Wechaty to provide a consisting API on all IM platforms for build a chatbot. We are supporting Whatsapp already, however, the Wahtsapp support is very limited. We want to implement more functions so that our developers can run their chatbots on Whatsapp to perform as much as action we can."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/huan"},"Huan"),", ",Object(n.b)("a",{parentName:"li",href:"https://github.com/treeguard"},"@treeguard"),", ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/univerone/"},"Shan")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Core development"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language, ",Object(n.b)("a",{parentName:"li",href:"https://github.com/pedroslopez/whatsapp-web.js/"},"whatsapp-web.js"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-33-implement-twitter-puppet"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/33"},'Project #33: Implement "Twitter" Puppet')),Object(n.b)("p",null,"We want Wechaty to be the universal instant messaging SDK on all IM platforms for chatbot makers to build their great conversational user interface, so while these are our ideas of what we think would make good projects for the summer, we're eager to hear your ideas and proposals as well."),Object(n.b)("p",null,"Implement ",Object(n.b)("strong",{parentName:"p"},"Twitter Puppet"),". The Puppet abstraction allows Wechaty to provide a consisting API on all IM platforms for build a chatbot. We are supporting WeChat, WeCom, Whatsapp already, and we want to support Twitter so that our developers can run their chatbots on Twitter to serve users from Twitter."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/huan"},"Huan")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Core development"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language, Twitter API"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-34-implement-twilio-puppet"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/34"},'Project #34: Implement "Twilio" Puppet')),Object(n.b)("p",null,"We want Wechaty to be the universal instant messaging SDK on all IM platforms for chatbot makers to build their great conversational user interface, so while these are our ideas of what we think would make good projects for the summer, we're eager to hear your ideas and proposals as well."),Object(n.b)("p",null,"Implement ",Object(n.b)("strong",{parentName:"p"},"Twilio")," Puppet. The Puppet abstraction allows Wechaty to provide a consisting API on all IM platforms for build a chatbot. We are supporting WeChat, WeCom, Whatsapp already, and we want to support Twilio so that our developers can run their chatbots on SMS/MMS to serve users from the phone messaging."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/huan"},"Huan")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Core development"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language, Twilio API"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-35-implement-teams-puppet"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/35"},'Project #35: Implement "Teams" Puppet')),Object(n.b)("p",null,"We want Wechaty to be the universal instant messaging SDK on all IM platforms for chatbot makers to build their great conversational user interface, so while these are our ideas of what we think would make good projects for the summer, we're eager to hear your ideas and proposals as well."),Object(n.b)("p",null,"Implement ",Object(n.b)("strong",{parentName:"p"},"Teams")," Puppet. The Puppet abstraction allows Wechaty to provide a consisting API on all IM platforms for build a chatbot. We are supporting WeChat, WeCom, Whatsapp already, and we want to support Teams so that our developers can run their chatbots on company teams to serve users from the chatting and meeting."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/wj-mcat"},"@wj-Mcat")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Core development"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language, Teams Bot API"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-36-implement-wechaty-rasa-plugin"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/36"},"Project #36: Implement Wechaty Rasa Plugin")),Object(n.b)("p",null,Object(n.b)("a",{parentName:"p",href:"https://github.com/RasaHQ/rasa"},"Rasa")," is a popular task-oriented dialogue system which can be a pipeline in IM platform. What's more, wechaty is an unifiy conversation AI SDK for chatbot. So Wechaty + Rasa will be the perfect project that developer can easily deploy their chatbot on multi-platforms.  "),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Running Rasa Server. When you run the rasa server, it will expose the message service with http protocol."),Object(n.b)("li",{parentName:"ol"},"Communicating with Rasa Server. This process is a simple work which will send the request to the server and receive the message sending the wechaty end account.")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/wj-mcat/"},"@wj-Mcat")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Core development"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": Python programming language, Natural Language Processing, Rasa"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-37-automatic-video-production-with-a-news-content"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/37"},"Project #37: Automatic video production with a news content")),Object(n.b)("p",null,"We want to generate short videos, output short videos according to the input text, according to the emotion of the content, or join a virtual anchor."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/peterzhang/"},"@zhangchunsheng")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript, GoLang, Java, Python programming language, TensorFlow, PyTorch"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-38-improve-wechaty-puppet-lark"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/38"},"Project #38: Improve wechaty-puppet-lark")),Object(n.b)("p",null,"We want Wechaty to be the universal instant messaging SDK on all IM platforms for chatbot makers to build their great conversational user interface, so while these are our ideas of what we think would make good projects for the summer, we're eager to hear your ideas and proposals as well."),Object(n.b)("p",null,"Implement ",Object(n.b)("strong",{parentName:"p"},"Lark Puppet"),". The Puppet abstraction allows Wechaty to provide a consisting API on all IM platforms for build a chatbot. We are supporting WeChat, WeCom, Whatsapp already, and last year, we completed the initial development of the ",Object(n.b)("a",{parentName:"p",href:"https://github.com/wechaty/wechaty-puppet-lark"},"Lark Puppet"),". We want to improve this puppet so that our developers can run their chatbots on Lark more conveniently."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/roxanne718"},"Fairy"),", ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/huan"},"Huan")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Core development"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language, Lark API"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-39-an-faq-for-open-source-projects"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/39"},"Project #39: An FAQ for Open source projects")),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},'Open source project authors can recommend their projects to the robot, and excellent open source projects will be publicized through the "',Object(n.b)("a",{parentName:"li",href:"http://www.kaiyuanshe.cn/"},"KaiYuanShe/\u5f00\u6e90\u793e"),'".'),Object(n.b)("li",{parentName:"ol"},"Open source enthusiasts can ask the bot about open source projects that are suitable for their participation."),Object(n.b)("li",{parentName:"ol"},"This feature can be used as an extension of ",Object(n.b)("a",{parentName:"li",href:"https://github.com/kaiyuanshe/osschat"},"OSSChat"),".")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/zhuangbiaowei"},"Biaowei ZHUANG")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-40-wechaty-rust"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/40"},"Project #40: Wechaty Rust")),Object(n.b)("p",null,"Rust is a new programming language with increasing popularity for its performance, memory safety and extensibility with existing systems."),Object(n.b)("p",null,"Wechaty will benefit from a Rust Core module that interfaces with its original TypeScript code base for performance boost, and a potential to ship to browser and Native apps by building to binary and webAssembly."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/lhr0909"},"Simon LIANG"),", ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/lucifer1004"},"Zihua WU")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Core development"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": Rust programming language"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-41-automatically-label-and-classify-according-to-the-input-text-or-link"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/41"},"Project #41: Automatically label and classify according to the input text or link")),Object(n.b)("p",null,"We want to make a Wechaty plugin to automatically label and classify based on content. It can help us to classify the chat content so that we can inquire later."),Object(n.b)("p",null,"We hope that the content of the conversation can be stored persistently. It is best to have a visual panel to manage the content under different tabs."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/gengchen528/"},"@Leo chen")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": JavaScript,Node, Python, programming language, PyTorch"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-42-design-a-plug-in-to-provide-http-api-service-for-go-wechaty"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/42"},"Project #42: Design a plug-in to provide HTTP API service for go-wechaty")),Object(n.b)("p",null,"We want to make a go-wechaty plug-in to provide HTTP API service."),Object(n.b)("p",null,"With a complete basic API service, visual interface, cli, third-party services, etc. can be made based on the API later."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://github.com/silkagenet"},"@SilkageNet")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": JavaScript, Node, Golang"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-43-implement-a-group-information-collector-by-java-wechaty"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/43"},"Project #43: Implement a group information collector by java wechaty.")),Object(n.b)("p",null,"We run several WeChat discussion groups about back-end technology. There are many valuable discussions every week."),Object(n.b)("p",null,"Now those information were collected by person. So I want to design a program to make this process easier."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/diaozxin007"},"@diaozxin007"),", ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/redmaple1/"},"@RedMaple1")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": Java, CSS, HTML, JavaScript"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-44-develop-a-wechat-chatbot-for-building-simple-personal-knowledge-base"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/44"},"Project #44: Develop a WeChat chatbot for building simple personal knowledge base")),Object(n.b)("p",null,"The project goal is to develop a WeChat chatbot which can help build simple personal knowledge base. It should be able to perform two kinds of automated tasks:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"once receiving a post share, save the post title and link to your database"),Object(n.b)("li",{parentName:"ul"},"once receiving a text message, provide a list of posts related to the text")),Object(n.b)("p",null,"For example, if you share this post (",Object(n.b)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/108627613"},"\u80a1\u7968\u80a1\u5e02\u65b0\u624b\u5165\u95e8\u6307\u5357\uff08\u5b8c\u6574\u7248\uff09"),') to the chatbot from zhihu(\u77e5\u4e4e) app, it will save this post and notify you of the result. You will receive a list containing this post next time you send the chatbot a text message "\u80a1\u7968". Your backend server should be able to calculate the semantic similarity between message texts and posts.'),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/wade0564"},"@wade0564")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": Java, Database"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-45-wechaty-http-callback"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/45"},"Project #45: Wechaty HTTP Callback")),Object(n.b)("p",null,"HTTP callbacks via the Wechaty plugin, which opens all events via HTTP."),Object(n.b)("p",null,"Design event-driven wrappers to implement plugins for Wechaty's different language frameworks."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://github.com/dingdayu"},"Xiaoyu DING")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": RESTful API, Python, Golang, HTTP"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-46-wechat-group-society"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/46"},"Project #46: Wechat group-society")),Object(n.b)("p",null,"We would like to invite you to help us create a new way of socializing on wechat where individuals and groups can easily find like-minded people/groups by subscribing to our group-society official account."),Object(n.b)("p",null,"We will build up a centralized platform using our powerful ",Object(n.b)("a",{parentName:"p",href:"https://github.com/wechaty/wechaty-puppet-official-account"},"wechaty official account puppet")," to allow individual users as well as wechat groups to subscribe to. With group users' permission, we will use our wechaty bot to collect chat messages, and analyze the topics of interest for each group via ",Object(n.b)("a",{parentName:"p",href:"https://radimrehurek.com/gensim/"},"topic modeling tools"),". The top topics of each group will be used as its 'tag' so that individual users can search for and join the groups of interest. Besides, our wechaty bot can break the boundaries between groups of similar interests by sharing messages across groups."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"http://github.com/machengshen"},"@MachengShen"),", ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/huan"},"Huan")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript or Python programming language, Basic understanding of common design patterns and good software engineering habits, (Preferred) Experience with Pytorch/Tensorflow, and basic understanding of machine learning."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-47-github-webhook-transformerdeligator-for-im"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/47"},"Project #47: github webhook transformer/deligator for IM")),Object(n.b)("p",null,"The project's goal is create a github webhooks' transformer, after the transformation, it can make the content of those webhooks more suitable for displayed on the various IMs(wechat, facebook, whatsapp). It would be better to create a deligated hook transform service using Wechaty which can broadcast those webhook events to IM directly."),Object(n.b)("h4",{id:"background"},"Background"),Object(n.b)("p",null,"Github has a fantastic and strong webhook system allows you build or set up integrations easily. It can be used to trigger a CI build or update a deploy on production server, it is called workflow automation. And we can not only apply webhooks to automation, if we can easily broadcast these project events (pushes, prs, issues etc.) to various channels(wechat, facebook, whatsapp), it will be very conducive to people to discuss, comment and share. As it happens, Wechaty is one such product with a lot of puppeteers support many IMs which can help people create a chat bot in an easy way."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/iyjian/"},"@iyjian")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language, GitHub API"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Easy")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-48-wechaty-cluster-management-system"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/48"},"Project #48: Wechaty cluster management system")),Object(n.b)("p",null,"This project is about to manage multiple Wechaty bots, to provide unified system to control Wechaty clusters. Including following features:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Manage bot life cycles: create, start, stop and destroy."),Object(n.b)("li",{parentName:"ol"},"Control bot functionalities, such as sending & receiving messages, processing messages."),Object(n.b)("li",{parentName:"ol"},"Adopt hot reloadable plugins to extend the system easily.")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/padlocal/"},"@Padlocal")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Infrastructure/Automation"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-49-implement-wechaty-storage"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/49"},"Project #49: Implement wechaty-storage")),Object(n.b)("p",null,"We want Wechaty to support universal storage, so developers could be able to easily connect Wechaty with their own db. So we would like someone to implement the ",Object(n.b)("inlineCode",{parentName:"p"},"wechaty-storage"),"."),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Implement ",Object(n.b)("inlineCode",{parentName:"li"},"wechaty-storage")," with one type of supported persistent storage."),Object(n.b)("li",{parentName:"ol"},"Design the code structure to support future storage extension."),Object(n.b)("li",{parentName:"ol"},"Support data storage configuration, include db, schema, table etc.")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/windmemory/"},"@windmemory")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language, familiar with at least one type of persistent storage, such as MySQL, MongoDB, PostgreSQL etc."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-50-path-analysis-of-conversation-graphs"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/50"},"Project #50: path analysis of conversation graphs")),Object(n.b)("p",null,'for improving the quality of chatbots it would be great to have some analysis of conversation logs. basically plotting "routes" through the conversation.'),Object(n.b)("p",null,"this really needs to be connected to backend NLP, so that we can reduce down the inputs to common intents. otherwise there are just too many individual variations of patterns"),Object(n.b)("p",null,'so the proposal would be to see some type of "path analysis" of a conversation graph ideally we could plot this against the ideal path for comparison'),Object(n.b)("p",null,'if we were to use a graph database to store the conversations perhaps we could do deeper analysis for things like the "optimum route" between two nodes. or visualizing the paths for an easier way to understand them.'),Object(n.b)("p",null,"I have a couple of projects here that were early tests in this direction that I can share the repos of. they aren't really using graph analysis yet they are more plotting conversations as visual graphs using D3 or Cytoscape. This project would be ideally about taking this to a next level of investigation."),Object(n.b)("p",null,"It should be language agnostic - we would be working with tokens of intents and creating conversation graphs that link these intents together"),Object(n.b)("p",null,"Reference: ",Object(n.b)("a",{parentName:"p",href:"https://dc.rik.ai/projects/convoai"},"https://dc.rik.ai/projects/convoai")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/dcsan/"},"David 'DC' Collier")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-51-reinforcement-learning-as-a-method-to-design-conversations"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/51"},"Project #51: reinforcement learning as a method to design conversations")),Object(n.b)("p",null,'We can try to plan a perfect path through a conversation ahead of time, and write out a script for our bots. This is "top down design"'),Object(n.b)("p",null,"But often the user will run the conversation in a completely different way. If they were talking to a real human agent, the conversation would flow in a different sequence."),Object(n.b)("p",null,"Some authoring system such as rasa will start with this approach:\n",Object(n.b)("a",{parentName:"p",href:"https://rasa.com/docs/rasa/writing-stories"},"https://rasa.com/docs/rasa/writing-stories")),Object(n.b)("p",null,"But then try to use annotations of actual conversations to refine the conversation flow.\nHowever, the current tools on the market really are quite un-unsable for this. RASA stories IMHO qucikly devolve to a huge mess that is impossible to view or reason about."),Object(n.b)("p",null,'So this project would be a new start in trying to combine NLU conversation insights from "human in the loop" choices, or post-review of past conversations, with the top-down designed stories. The choices a human makes should affect future conversations in a probabalistic way'),Object(n.b)("p",null,"a simple prototype exists here, but it is not connected to any kind of NN model"),Object(n.b)("p",null,"Reference: ",Object(n.b)("a",{parentName:"p",href:"https://dc.rik.ai/projects/convoai"},"https://dc.rik.ai/projects/convoai")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/dcsan/"},"David 'DC' Collier")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-52-connect-chat-adventure-game-engine-to-wechaty"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/52"},"Project #52: connect chat adventure game engine to Wechaty")),Object(n.b)("p",null,"I wrote a game engine to deliver story like adventure games in a chat system. It was initially written for slack and Discord."),Object(n.b)("p",null,'It would be interesting to port this to support WeChat. That would allow people to play group "adventure games" in a chat session.'),Object(n.b)("p",null,"The engine uses a script format to describe the stories ",Object(n.b)("a",{parentName:"p",href:"https://github.com/dcsan/storydata"},"https://github.com/dcsan/storydata")),Object(n.b)("p",null,"It has concepts for: rooms, actors, items, and inventory (things uses carry around)"),Object(n.b)("p",null,"all matching for sentences is done using Regex so we won't have the problems of systems like rivescript which uses a simplified regex pattern that doesn't work well for non-space languages like Chinese (or japanese)"),Object(n.b)("p",null,"The main runtime engine is all written in typescript."),Object(n.b)("p",null,'currently there is a "PAL" class - Platform Abstraction Layer- that already has adapters for Slack and Discord APIs. This project would mainly be to adapt this to wechaty input/output API for delivering games into groups'),Object(n.b)("p",null,"You can play some of the games built with this on Discord, but this maybe hard inside the GFW. ",Object(n.b)("a",{parentName:"p",href:"https://ten.rik.ai/asylum/"},"https://ten.rik.ai/asylum/")),Object(n.b)("p",null,'of course discord and slack have many features wechat does not, such as buttons or "clickable emoji reactions" so the adapter would have to deal with things like a "collector" or different ways to present menus. Wechat\'s main feature is that it\'s usable inside China.'),Object(n.b)("p",null,'Eventually we could make a web based editor for adding new stories, that would allow something like "fan fiction" stories to be created.'),Object(n.b)("p",null,"play BoPO game on discord here (direct link to our server) ",Object(n.b)("a",{parentName:"p",href:"https://discord.com/invite/Qgup6qU"},"https://discord.com/invite/Qgup6qU")),Object(n.b)("p",null,"a bit more info/writeup ",Object(n.b)("a",{parentName:"p",href:"https://dc.rik.ai/projects/ten"},"https://dc.rik.ai/projects/ten")),Object(n.b)("p",null,"this type of engine could be used to deliver language learning games over wechat too. that was the original idea for this project: ",Object(n.b)("a",{parentName:"p",href:"https://dc.rik.ai/projects/comic-english"},"https://dc.rik.ai/projects/comic-english")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/dcsan/"},"David 'DC' Collier")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-53-create-mind-map-authoring-tool-for-simple-wechaty-bots"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/53"},'Project #53: create "mind map" authoring tool for simple wechaty bots')),Object(n.b)("p",null,"A large number of bots can be very simple decision trees, using some type of regex parser on the responses. But building these bots is still very time consuming."),Object(n.b)("p",null,'We propose using a "mind map" visual editor to create simple bots.\nMany open source libraries exist for editing mind maps\nThis tool would then use that map data as a conversation structure for people to interact with bots.'),Object(n.b)("p",null,"The first version would be purely for text based input and output\nthe mind map format could be seen as a simple outliner view:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-txt"},"- bot: what's your favorite color?\n  - user: blue\n    - bot: the sky is blue!\n  - user: red\n    - bot: red is dynamic\n")),Object(n.b)("p",null,'While this is only useful for simple bots, the ease of use and accessibility for building out quick and simple bots fits the "80:20" pareto principle.'),Object(n.b)("p",null,"some mindmap tools here: ",Object(n.b)("a",{parentName:"p",href:"https://awesomeopensource.com/projects/mindmap"},"https://awesomeopensource.com/projects/mindmap")),Object(n.b)("p",null,"So the parts of this project would be:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"visual editor (react? vue?)")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"generates structured conversation syntax")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"runtime to accept responses from wechaty adapter, maintain conversation session and reply")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"p",href:"https://wechaty.js.org/contributors/dcsan/"},"David 'DC' Collier"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Category"),": Fun/Peripheral")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Skills Required"),": TypeScript programming language")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Difficulty Level"),": Medium"))),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-54-implement-slack-puppet"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/54"},'Project #54: Implement "Slack" Puppet')),Object(n.b)("p",null,"Since the Wechaty is a universal messaging SDK. I believe we can implement this with Slack, but not only on Slack."),Object(n.b)("p",null,"The Slack and Wechat message may be able to sync the messages. So while there is more open idea we can integrate. I think this would be good project for summer"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/kis87988/"},"William Chen")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Core development"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language, Slack API"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-55-implement-cli-control-wechaty"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/55"},"Project #55: Implement CLI control wechaty")),Object(n.b)("p",null,"Web GUI is great, but not great enough if we just want to have a terminal while we are doing the implementation testing, If we can have a CLI tool to control the bot and CLI likely GUI to have a display dashboard to relate control(like tmux). That will be great."),Object(n.b)("p",null,"I believe there is a more open ideas we can integrate. I think this would be a good project for summer"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/kis87988/"},"William Chen")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language, Python, CLI, Linux"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-56-implement-maodou-assistant-based-on-conversational-ai"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/56"},"Project #56: Implement Maodou assistant based on conversational AI")),Object(n.b)("p",null,"We want to build an AI-based assistant to access specific course from maodouketang.com."),Object(n.b)("p",null,"what we want to do is:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"send any live course mini-program link to whom has subscribed in wechat"),Object(n.b)("li",{parentName:"ol"},"send time alert to parent according to the students who has enrolled a class"),Object(n.b)("li",{parentName:"ol"},"conversational-ai based interface to use Maodou assistant")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/limingth/"},"@Ming LI")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language, NLP"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-58-implement-wechaty-for-mac"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/58"},"Project #58: Implement Wechaty For Mac")),Object(n.b)("p",null,"Make Wechaty support macOS"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Which we can do"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Hook the Mac wechat message\uff08I've completed the core example\uff09"),Object(n.b)("li",{parentName:"ul"},"Enable message sending and receiving to support Wechaty"),Object(n.b)("li",{parentName:"ul"},"Messages can be automatically replied, using a more intelligent AI chat robot instead of the current Tencent AI"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Basic project code"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"https://github.com/MustangYM/WeChatExtension-ForMac"},"https://github.com/MustangYM/WeChatExtension-ForMac")))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Useful Links"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"https://github.com/wechaty/wechaty-puppet-macOS"},"https://github.com/wechaty/wechaty-puppet-macOS")))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"p",href:"https://github.com/mustangym"},"@MustangYM"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Category"),": Core development")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Skills Required"),": TypeScript programming language, macOS development")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Difficulty Level"),": Medium"))),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-59-improve-matrix-appservice-wechaty-user-info"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/59"},"Project #59: Improve matrix-appservice-wechaty user info")),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"matrix-appservice-wechaty")," is a WeChat (\u5fae\u4fe1) Matrix AppService for bridging the Matrix user with WeChat user."),Object(n.b)("p",null,"According to ",Object(n.b)("a",{parentName:"p",href:"https://matrix.org/docs/guides/types-of-bridging"},"Types of Bridging"),", Wechaty Bot in Matrix will create an ",Object(n.b)("a",{parentName:"p",href:"https://matrix.org/docs/guides/types-of-bridging#simple-puppeted-bridge"},"Simple Puppeted Bridge")," with ",Object(n.b)("a",{parentName:"p",href:"https://matrix.org/docs/guides/types-of-bridging#portal-rooms"},"Portal Rooms")," because we want to bring all conversations from Wechat to Matrix, and let the Matrix user control his account on Wechat."),Object(n.b)("p",null,"We want to improve this module and make it better, including but not limited to the following new features / fixes:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Appservice doesn't show the user name and user avatar in group chat. Now we need to show the correct user name and avatar in group chat. And show the user avatar in the direct message."),Object(n.b)("li",{parentName:"ol"},"Appservice can not send files to wechat users. Now we make appservice send files and pictures to wechat users."),Object(n.b)("li",{parentName:"ol"},"Appservice can not display wechat bbob message directly. We need to convert bbob message to HTML and return it to the matrix server.")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/yswtrue/"},"Roy"),", ",Object(n.b)("a",{parentName:"li",href:"https://github.com/ericmigi/"},"Eric Migicovsky")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language, ","[Matrix]"," API"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-62-create-a-web-component-for-a-chat-ui-for-wechaty"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/62"},"Project #62: Create a Web Component for a Chat UI for Wechaty")),Object(n.b)("p",null,"Create a Web Component in Angular for a Chat UI for Wechaty."),Object(n.b)("p",null,"Useful Links"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",{parentName:"li",href:"https://fiora.suisuijiang.com/"},"Fiora")," is an interesting chat application power by socket.io, koa, MongoDB and React. (See: ",Object(n.b)("a",{parentName:"li",href:"https://github.com/yinxin630/fiora/issues/185"},"https://github.com/yinxin630/fiora/issues/185"),")"),Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",{parentName:"li",href:"https://github.com/jpush/aurora-imui"},"Aurora IMUI is a general IM UI components library, which does not depend on any specific IM SDK.")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",{parentName:"li",href:"https://themeforest.net/item/chatvia-angular-chat-app-template/28316331"},"Chatvia - Angular Chat App Template"))),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/lijiarui/"},"@lijiarui"),", ",Object(n.b)("a",{parentName:"li",href:"https://wechaty.js.org/contributors/huan"},"Huan")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Core development"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": TypeScript programming language, Angular"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h3",{id:"project-63-wechaty-todo-list"},Object(n.b)("a",{parentName:"h3",href:"https://github.com/wechaty/summer-of-wechaty/issues/67"},"Project #63: Wechaty Todo List")),Object(n.b)("p",null,"We often need to install various apps in our mobile phones to complete different tasks, so I hope to use wechaty to do a task management function, which can complete the whole operation through wechaty."),Object(n.b)("p",null,"Preliminary design:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Wechaty allows you to add to-do items"),Object(n.b)("li",{parentName:"ol"},"Inform the user in advance when the to-do is about to end"),Object(n.b)("li",{parentName:"ol"},"When the to-do has been completed, send the status change information to finish the current task"),Object(n.b)("li",{parentName:"ol"},"Monthly statistics of the current month, the total number of to-do items,the total number of completed, unfinished, to be completed")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Potential Mentor(s)"),": ",Object(n.b)("a",{parentName:"li",href:"https://github.com/Jesn"},"@Darren")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Category"),": Fun/Peripheral"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Skills Required"),": .Net Core TypeScript"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Difficulty Level"),": Medium")),Object(n.b)("hr",null),Object(n.b)("h2",{id:"contact-us"},"Contact us"),Object(n.b)("p",null,"You can ",Object(n.b)("a",{parentName:"p",href:"https://gitter.im/wechaty/wechaty"},"join our Gitter")," network if you aren\u2019t already a member."))}p.isMDXComponent=!0},247:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var r=a(0),o=a.n(r);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},h=o.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(a),h=r,m=b["".concat(i,".").concat(h)]||b[h]||u[h]||n;return a?o.a.createElement(m,l(l({ref:t},s),{},{components:a})):o.a.createElement(m,l({ref:t},s))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,i=new Array(n);i[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<n;s++)i[s]=a[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);